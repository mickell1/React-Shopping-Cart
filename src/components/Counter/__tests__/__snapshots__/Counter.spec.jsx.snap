// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Counter should render the Counter Component correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Counter
    state={
      Object {
        "value": 1,
      }
    }
    updateQuantity={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <a
          className="decrease"
          href="/#"
          onClick={[Function]}
        >
          –
        </a>,
        <input
          className="quantity"
          onChange={[Function]}
          type="number"
        />,
        <a
          className="increase"
          href="/#"
          onClick={[Function]}
        >
          +
        </a>,
      ],
      "className": "step-input",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "–",
          "className": "decrease",
          "href": "/#",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "–",
        "type": "a",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "quantity",
          "onChange": [Function],
          "type": "number",
          "value": undefined,
        },
        "ref": "feedQty",
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "+",
          "className": "increase",
          "href": "/#",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "+",
        "type": "a",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="decrease"
            href="/#"
            onClick={[Function]}
          >
            –
          </a>,
          <input
            className="quantity"
            onChange={[Function]}
            type="number"
          />,
          <a
            className="increase"
            href="/#"
            onClick={[Function]}
          >
            +
          </a>,
        ],
        "className": "step-input",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "–",
            "className": "decrease",
            "href": "/#",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "–",
          "type": "a",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "quantity",
            "onChange": [Function],
            "type": "number",
            "value": undefined,
          },
          "ref": "feedQty",
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "+",
            "className": "increase",
            "href": "/#",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "+",
          "type": "a",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

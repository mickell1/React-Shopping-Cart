// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Product should render the Product Component correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Product
    addToBasket={[MockFunction]}
    image="Iphone"
    price={800}
    productId={1}
    quantity={1}
    title="Iphone x"
    updateQuantity={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="product-image"
        >
          <img
            alt="Iphone x"
            onClick={[Function]}
            src="Iphone"
          />
        </div>,
        <h4
          className="product-name"
        >
          Iphone x
        </h4>,
        <p
          className="product-price"
        >
          800
        </p>,
        <Counter
          updateQuantity={[MockFunction]}
        />,
        <div
          className="product-action"
        >
          <Button
            className=""
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            ADD TO CART
          </Button>
        </div>,
      ],
      "className": "product",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <img
            alt="Iphone x"
            onClick={[Function]}
            src="Iphone"
          />,
          "className": "product-image",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "Iphone x",
            "onClick": [Function],
            "src": "Iphone",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Iphone x",
          "className": "product-name",
        },
        "ref": null,
        "rendered": "Iphone x",
        "type": "h4",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": 800,
          "className": "product-price",
        },
        "ref": null,
        "rendered": 800,
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "productQuantity": undefined,
          "resetQuantity": undefined,
          "updateQuantity": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Button
            className=""
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            ADD TO CART
          </Button>,
          "className": "product-action",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "ADD TO CART",
            "className": "",
            "disabled": false,
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "ADD TO CART",
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="product-image"
          >
            <img
              alt="Iphone x"
              onClick={[Function]}
              src="Iphone"
            />
          </div>,
          <h4
            className="product-name"
          >
            Iphone x
          </h4>,
          <p
            className="product-price"
          >
            800
          </p>,
          <Counter
            updateQuantity={[MockFunction]}
          />,
          <div
            className="product-action"
          >
            <Button
              className=""
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              ADD TO CART
            </Button>
          </div>,
        ],
        "className": "product",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt="Iphone x"
              onClick={[Function]}
              src="Iphone"
            />,
            "className": "product-image",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "Iphone x",
              "onClick": [Function],
              "src": "Iphone",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Iphone x",
            "className": "product-name",
          },
          "ref": null,
          "rendered": "Iphone x",
          "type": "h4",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 800,
            "className": "product-price",
          },
          "ref": null,
          "rendered": 800,
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "productQuantity": undefined,
            "resetQuantity": undefined,
            "updateQuantity": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Button
              className=""
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              ADD TO CART
            </Button>,
            "className": "product-action",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "ADD TO CART",
              "className": "",
              "disabled": false,
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": "ADD TO CART",
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
